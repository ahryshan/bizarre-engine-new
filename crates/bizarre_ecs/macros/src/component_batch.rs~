use std::collections::{BTreeMap, BTreeSet, HashSet};

use proc_macro::Diagnostic;
use proc_macro2::TokenStream;
use quote::quote;
use syn::{spanned::Spanned, DeriveInput};

pub fn derive_component_batch_impl(input: DeriveInput) -> TokenStream {
    let DeriveInput {
        ident,
        generics,
        data,
        ..
    } = input;

    let (impl_generics, type_generics, where_clause) = generics.split_for_impl();

    let data = match data {
        syn::Data::Struct(data_struct) => data_struct,
        _ => panic!("`ComponentBatch` can be derived only for structs"),
    };

    let mut visited_types = BTreeMap::<String, syn::Type>::new();

    let (types, idents): (Vec<_>, Vec<_>) = data
        .fields
        .iter()
        .cloned()
        .map(|field| {
            if let Some(first_ty) = visited_types.get(&format!("{:?}", field.ty)) {
                Diagnostic::spanned(
                    first_ty.span(),
                    proc_macro::Level::Note,
                    "First `{first_ty:?}` component here",
                )
                .emit();
                Diagnostic::spanned(
                    field.ty.span(),
                    proc_macro::Level::Error,
                    "A `ComponentBatch` cannot have more than one component of the same type",
                )
                .emit();
            } else {
                visited_types.insert(format!("{:?}", field.ty), field.ty.clone());
            }
            (
                field.ty,
                field
                    .ident
                    .expect("`ComponentBatch` cannot be derived for tuple structs"),
            )
        })
        .unzip();

    quote! {
        #[automatically_derived]
        impl #impl_generics ComponentBatch for #ident #type_generics #where_clause {
            fn register(registry: &mut ComponentRegistry) {
                #(registry.register::<#types>();)*
            }

            fn insert(self, registry: &mut ComponentRegistry, entity: Entity) {
                let Self {#(#idents,)*} = self;
                #(registry.insert(entity, #idents);)*
            }

            fn remove(registry: &mut ComponentRegistry, entity: Entity) {
                #(registry.remove::<#types>(entity);)*
            }
        }
    }
}
